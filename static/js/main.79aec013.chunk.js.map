{"version":3,"sources":["actions/actionTypes.js","actions/index.js","App.js","serviceWorker.js","reducers/ratesReducer.js","reducers/rootReducer.js","store/store.js","index.js"],"names":["FETCH_SUCCESS","fetchData","dispatch","type","fetch","then","response","json","responseData","loading","data","catch","error","fetchFailure","App","prettyCurrency","crr","action","fixedCrr","toFixed","toString","length","createTable","props","table","children","displayedCurrencies","push","filter","item","includes","map","this","className","href","Component","defaultProps","connect","state","rates","date","url","Boolean","window","location","hostname","match","ratesInitialState","combineReducers","Object","entries","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+OACaA,EAAgB,gBCsBhBC,EAAY,kBAAM,SAACC,GAC9BA,EAhBiC,CACjCC,KDT2B,kBCyB3BC,MAnBU,mDAoBPC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLN,EAhBiC,CACrCC,KAAMH,EACNS,SAAS,EACTC,KAa0BF,OAEvBG,OAAM,SAACC,GAAD,OAAWV,EAZM,SAACU,GAAD,MAAY,CACtCT,KDjB2B,gBCkB3BS,SAU6BC,CAAaD,SCvBtCE,E,4MAOJC,eAAiB,SAACC,EAAKC,GACN,IAAXA,EACFD,EAAa,IAANA,EAAa,IACA,IAAXC,IACTD,EAAa,GAANA,EAAY,KAKrB,IADA,IAAIE,EAAWF,EAAIG,QAAQ,GAAGC,WACvBF,EAASG,OAAS,GACvBH,EAAW,IAAMA,EAGnB,OAAOA,G,EAGTI,YAAc,WAAO,IAEXZ,EAAS,EAAKa,MAAdb,KACJc,EAAQ,GACRC,EAAW,GACXC,EAAsB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAoB9D,OAlBDD,EAASE,KAERjB,EAAKkB,QAAO,SAACC,GAAD,OACVH,EAAoBI,SAASD,EAAK,OAGnCE,KAAI,SAACF,GAAD,OACH,+BACE,6BAAKA,EAAK,KACV,6BAAK,EAAKd,eAAec,EAAK,GAAI,KAClC,6BAAK,EAAKd,eAAec,EAAK,MAC9B,6BAAK,EAAKd,eAAec,EAAK,GAAI,OAJ3BA,EAAK,QAShBL,EAAMG,KAAK,gCAAQF,KAEZD,G,kEA5CPQ,KAAKT,MAAMtB,c,+BAmDX,OAFoB+B,KAAKT,MAAjBd,QAGC,6CAGL,+BACE,sBAAKwB,UAAU,WAAf,UACE,wBAAOA,UAAU,gBAAjB,UACE,gCACE,+BACE,sCACA,wCACA,+CACA,8CAGHD,KAAKV,iBAER,uDAEE,uBAFF,wBAGE,mBAAGY,KAAK,+BAAR,0CAHF,2B,GAxEMC,aAqGlBrB,EAAIsB,aAAe,CACjB1B,KAAO,IAGT,IAWe2B,eAXS,SAACC,GAAD,MAAY,CAClC5B,KAAM4B,EAAMC,MAAM7B,KAClB8B,KAAMF,EAAMC,MAAMC,KAClB/B,QAAS6B,EAAMC,MAAM9B,YAGI,SAACP,GAAD,MAAe,CACxCD,UAAW,SAACwC,GAAD,OAASvC,EAASD,SAIhBoC,CAA6CvB,GC/GxC4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BChBAC,EAAoB,CACxBrC,KAAM,GACN8B,KAAM,GACN/B,SAAS,GCDIuC,cAAgB,CAC7BT,MDIa,WAAwC,IAAvCD,EAAsC,uDAA9BS,EAAmB9B,EAAW,uCACpD,OAAQA,EAAOd,MACb,KAAKH,EACH,OAAO,2BACFsC,GADL,IAEE5B,KAAMuC,OAAOC,QAAQjC,EAAOP,KAAK6B,OACjCC,KAAMvB,EAAOP,KAAK8B,KAClB/B,SAAS,IAEb,QACE,OAAO6B,MEfPa,EAAmBR,OAAOS,sCAAwCC,IAOzDC,EALDC,YACZC,EACAL,EAAiBM,YAAgBC,OCEnCC,IAASC,OACL,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,SJmHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5D,MAAK,SAAA6D,GACjCA,EAAaC,kB","file":"static/js/main.79aec013.chunk.js","sourcesContent":["export const FETCH_REQUEST = 'FETCH_REQUEST';\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS';\nexport const FETCH_FAILURE = 'FETCH_FAILURE';","import {\n  FETCH_REQUEST,\n  FETCH_SUCCESS,\n  FETCH_FAILURE,\n} from './actionTypes';\n\nconst URL = 'https://api.exchangeratesapi.io/latest?base=IDR';\n\nexport const fetchRequest = () => ({\n  type: FETCH_REQUEST,\n});\n\nexport const fetchSuccess = (data) => ({\n  type: FETCH_SUCCESS,\n  loading: false,\n  data,\n});\n\nexport const fetchFailure = (error) => ({\n  type: FETCH_FAILURE,\n  error,\n});\n\nexport const fetchData = () => (dispatch) => {\n  dispatch(fetchRequest());\n  fetch(URL)\n    .then((response) => response.json())\n    .then((responseData) => {\n      dispatch(fetchSuccess(responseData));\n    })\n    .catch((error) => dispatch(fetchFailure(error)));\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchData } from './actions';\n\nclass App extends Component {\n  \n  componentDidMount() {\n    \n    this.props.fetchData();\n  }\n\n  prettyCurrency = (crr, action) => {\n    if (action === 0) {\n      crr = (crr * 102) / 100;\n    } else if (action === 1) {\n      crr = (crr * 98) / 100;\n    } else {\n      // Do nothing...\n    }\n    var fixedCrr = crr.toFixed(6).toString();\n    while (fixedCrr.length < 8) {\n      fixedCrr = \"0\" + fixedCrr;\n    }\n\n    return fixedCrr;\n  };\n\n  createTable = () => {\n\n    const { data } = this.props;\n    let table = [];\n    let children = [];\n    let displayedCurrencies = [\"IDR\", \"CAD\", \"JPY\", \"CHF\", \"EUR\", \"USD\"];\n\n   children.push(\n\n    data.filter((item) => (\n      displayedCurrencies.includes(item[0])\n    ))\n\n    .map((item) => (\n      <tr key={item[0]}>\n        <td>{item[0]}</td>\n        <td>{this.prettyCurrency(item[1], 0)}</td>\n        <td>{this.prettyCurrency(item[1])}</td>\n        <td>{this.prettyCurrency(item[1], 1)}</td>\n      </tr>\n    ))\n    );\n\n    table.push(<tbody>{children}</tbody>); // We create the parent tbody tags and add the inner loop (children).\n\n    return table;\n  };\n\n  render() {\n\n    const { loading } = this.props;\n    \n    if (loading) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <main>\n          <div className=\"App-body\">\n            <table className=\"currencyTable\">\n              <thead>\n                <tr>\n                  <th>&nbsp;</th>\n                  <th>WE BUY</th>\n                  <th>EXCHANGE RATE</th>\n                  <th>WE SELL</th>\n                </tr>\n              </thead>\n              {this.createTable()}\n            </table>\n            <p>\n              * base currency is IDR\n              <br />* As for the API,&nbsp;\n              <a href=\"https://exchangeratesapi.io/\">\n                https://exchangeratesapi.io/\n              </a>\n              &nbsp;is used.\n            </p>\n          </div>\n        </main>\n      );\n    }\n  }\n}\n\nApp.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n      ]),\n    ),\n  ),\n  date: PropTypes.string,\n  fetchData: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n};\n\nApp.defaultProps = {\n  data : [],\n};\n\nconst mapStateToProps = (state) => ({\n  data: state.rates.data,\n  date: state.rates.date,\n  loading: state.rates.loading,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchData: (url) => dispatch(fetchData(url)),\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FETCH_SUCCESS } from '../actions/actionTypes';\n\nconst ratesInitialState = {\n  data: [],\n  date: '',\n  loading: true,\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default (state = ratesInitialState, action) => {\n  switch (action.type) {\n    case FETCH_SUCCESS:\n      return {\n        ...state,\n        data: Object.entries(action.data.rates),\n        date: action.data.date,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport ratesReducer from './ratesReducer';\n\n\nexport default combineReducers({\n  rates: ratesReducer,\n});\n","import { applyMiddleware, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/rootReducer';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './store/store';\n\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root')\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}